; Repeatedly increments the value of x, except during the 6th loop iteration,
; during which the value of x is decremented. Note that this will only be
; visible at the 7th observation point, which is at the beginning of the loop.
(define-program a
  (let x int 0)
  (let i int 0)
  (repeat
    (observe)
    (if (/= i 5)
      (then (set x (+ x 1)))
      (else (set x (- x 1))))
    (set i (+ i 1))))

(expect (control-flow-graph a
  (declare x int)
  (declare i int)
  (init 0)
  (block 0
    (steps
      (set x 0)
      (set i 0))
    (next 1))
  (block 1
    (steps
      (observe))
    (next ((/= i 5) 2 3)))
  (block 2
    (steps
      (set x (+ x 1)))
    (next 4))
  (block 3
    (steps
      (set x (- x 1)))
    (next 4))
  (block 4
    (steps
      (set i (+ i 1)))
    (next 1))))

; Repeatedly increases the value of x by a random non-negative integer.
(define-program b
  (let x int 0)
  (repeat
    (observe)
    (let t int (nondet (min 0)))
    (set x (+ x t))))

(expect (control-flow-graph b
  (declare x int)
  (declare t int)
  (init 0)
  (block 0
    (steps
      (set x 0))
    (next 1))
  (block 1
    (steps
      (observe)
      (set t (nondet (min 0)))
      (set x (+ x t)))
    (next 1))))

; A counterexample exists but only occurs at the 7th observation point. We run
; the algorithm twice to test this.

(strategy (observations (max 6)))

(find-counterexample
  (forall (traces a)
    (exists (traces b)
      (= (trace-value a x) (trace-value b x)))))

(expect (outcome no-counterexample))

(strategy (observations (min 7)))

(find-counterexample
  (forall (traces a)
    (exists (traces b)
      (= (trace-value a x) (trace-value b x)))))

(expect (outcome counterexample))
