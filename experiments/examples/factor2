; Repeatedly increases the value of x by some randomly selected constant a.
(define-program add-const
  (let x int 0)
  (let a int (nondet))
  (repeat
    (observe)
    (set x (+ x a))))

(expect (control-flow-graph add-const
  (declare x int)
  (declare a int)
  (init 0)
  (block 0
    (steps
      (set x 0)
      (set a (nondet)))
    (next 1))
  (block 1
    (steps
      (observe)
      (set x (+ x a)))
    (next 1))))

; Repeatedly increases the value of y by some randomly selected constant b times
; two
(define-program add-const-x2
  (let y int 0)
  (let b int (nondet))
  (repeat
    (observe)
    (set y (+ y (* 2 b)))))

(expect (control-flow-graph add-const-x2
  (declare y int)
  (declare b int)
  (init 0)
  (block 0
    (steps
      (set y 0)
      (set b (nondet)))
    (next 1))
  (block 1
    (steps
      (observe)
      (set y (+ y (* 2 b))))
    (next 1))))

; Because the second program only produces sequences of even values, the first
; program is not a refinement of the second.
(find-counterexample
  (forall (traces add-const)
    (exists (traces add-const-x2)
      (= x y))))

(expect (outcome counterexample))

(strategy (observations (max 5)))

; Converely, the second program refines the first program.
(find-counterexample
  (forall (traces add-const-x2)
    (exists (traces add-const)
      (= x y))))

(expect (outcome no-counterexample))
