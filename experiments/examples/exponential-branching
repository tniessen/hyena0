(strategy (observations 1))

(define-program 1a
  (let x int 0)
  (while (<= x 10)
    (if (nondet)
      (then (set x (+ x 1)))))
  (observe))

(define-program 1b
  (let x int 0)
  (let i int 0)
  (while (< i 10)
    (if (nondet)
      (then (set x (+ x 1))))
    (set i (+ i 1)))
  (observe))

(find-counterexample
  (forall (traces 1a a)
    (exists (traces 1b b)
      (= (trace-value a x) (trace-value b x)))))

(expect (outcome counterexample))

(define-program 2a
  (let x int 0)
  (let i int 0)
  (while (<= i 5)
    (if (nondet)
      (then (set x (+ x 1))))
    (set i (+ i 1)))
  (observe))

(define-program 2b
  (let x int 1)
  (let i int 0)
  (while (< i 5)
    (if (nondet)
      (then (set x (+ x 1))))
    (set i (+ i 1)))
  (observe))

(find-counterexample
  (forall (traces 2a a)
    (exists (traces 2b b)
      (= (trace-value a x) (trace-value b x)))))

(expect (outcome counterexample))
