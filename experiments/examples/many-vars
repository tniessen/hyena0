(define-program many-vars
  (let a int 0)
  (let b int 1)
  (let c int 2)
  (let d int 3)
  (let e int 4)
  (let f int 5)
  (let g int 6)
  (let h int 7)
  (let i int 8)
  (let j int 9)
  (let k int 10)
  (let l int 11)
  (let m int 12)
  (let n int 13)
  (let o int 14)
  (let p int 15)
  (let q int 16)
  (let r int 17)
  (let s int 18)
  (let t int 19)
  (let u int 20)
  (let v int 21)
  (let w int 22)
  (let x int 23)
  (let y int 24)
  (let z int 25)
  (observe))

(expect (control-flow-graph many-vars
  (declare a int)
  (declare b int)
  (declare c int)
  (declare d int)
  (declare e int)
  (declare f int)
  (declare g int)
  (declare h int)
  (declare i int)
  (declare j int)
  (declare k int)
  (declare l int)
  (declare m int)
  (declare n int)
  (declare o int)
  (declare p int)
  (declare q int)
  (declare r int)
  (declare s int)
  (declare t int)
  (declare u int)
  (declare v int)
  (declare w int)
  (declare x int)
  (declare y int)
  (declare z int)
  (init 0)
  (block 0
    (steps
      (set a 0)
      (set b 1)
      (set c 2)
      (set d 3)
      (set e 4)
      (set f 5)
      (set g 6)
      (set h 7)
      (set i 8)
      (set j 9)
      (set k 10)
      (set l 11)
      (set m 12)
      (set n 13)
      (set o 14)
      (set p 15)
      (set q 16)
      (set r 17)
      (set s 18)
      (set t 19)
      (set u 20)
      (set v 21)
      (set w 22)
      (set x 23)
      (set y 24)
      (set z 25)
      (observe))
    (next (halt)))))

(find-counterexample
  (forall (traces many-vars 1)
    (exists (traces many-vars 2)
      (= (trace-value 1 a) (trace-value 2 z)))))

(expect (outcome counterexample))
