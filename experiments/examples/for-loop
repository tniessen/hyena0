; This program always computes the value 11 for x.
(define-program foo
  (let x int 0)
  (while (< x 11)
    (set x (+ x 1)))
  (observe))

(expect (control-flow-graph foo
  (declare x int)
  (init 0)
  (block 0
    (steps (set x 0))
    (next ((< x 11) 1 2)))
  (block 1
    (steps (set x (+ x 1)))
    (next ((< x 11) 1 2)))
  (block 2
    (steps (observe))
    (next (halt)))))

; This program produces either an (even or odd) negative value or an even
; non-negative value for x.
(define-program bar
  (let x int (nondet))
  (if (> x 0) (then (set x (+ x x))))
  (observe))

(expect (control-flow-graph bar
  (declare x int)
  (init 0)
  (block 0
    (steps
      (set x (nondet)))
    (next ((> x 0) 1 2)))
  (block 1
    (steps
      (set x (+ x x)))
    (next 2))
  (block 2
    (steps (observe))
    (next (halt)))))

(strategy (observations 1))

; The first program produces an odd positive integer, but every odd intege
; produced by the second program is negative, so the first program does not
; refine the second.
(find-counterexample
  (forall (traces foo)
    (exists (traces bar)
      (= (trace-value foo x) (trace-value bar x)))))

(expect (outcome counterexample))
