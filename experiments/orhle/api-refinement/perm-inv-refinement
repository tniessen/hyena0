(define-program original
  (let in1 int (nondet))
  (let in2 int (nondet))
  (let in3 int (nondet))
  (let sum int (+ (+ in1 in2) in3))
  (observe))

(define-program refinement
  (let in1 int (nondet))
  (let in2 int (nondet))
  (if (< in2 in1) (then (set in2 in1)))
  (let in3 int (nondet))
  (if (< in3 in2) (then (set in3 in2)))
  (let sum int (+ (+ in1 in2) in3))
  (observe))

(strategy (observations 1))

(find-counterexample
  (forall (traces refinement)
    (exists (traces original)
      (and (or (and (= (trace-value original in1) (trace-value refinement in1))
                    (= (trace-value original in2) (trace-value refinement in2))
                    (= (trace-value original in3) (trace-value refinement in3)))
               (and (= (trace-value original in1) (trace-value refinement in1))
                    (= (trace-value original in2) (trace-value refinement in3))
                    (= (trace-value original in3) (trace-value refinement in2)))
               (and (= (trace-value original in1) (trace-value refinement in2))
                    (= (trace-value original in2) (trace-value refinement in1))
                    (= (trace-value original in3) (trace-value refinement in3)))
               (and (= (trace-value original in1) (trace-value refinement in2))
                    (= (trace-value original in2) (trace-value refinement in3))
                    (= (trace-value original in3) (trace-value refinement in1)))
               (and (= (trace-value original in1) (trace-value refinement in3))
                    (= (trace-value original in2) (trace-value refinement in1))
                    (= (trace-value original in3) (trace-value refinement in2)))
               (and (= (trace-value original in1) (trace-value refinement in3))
                    (= (trace-value original in2) (trace-value refinement in2))
                    (= (trace-value original in3) (trace-value refinement in1))))
           (= (trace-value original sum) (trace-value refinement sum))))))

(expect (outcome no-counterexample))
(print-stats)

;; (strategy (observations 1))

;; (find-counterexample
;;   (forall (traces refinement)
;;     (exists (traces original)
;;       (and (or (and (= (trace-value original in1) (trace-value refinement in1))
;;                     (= (trace-value original in2) (trace-value refinement in2))
;;                     (= (trace-value original in3) (trace-value refinement in3)))
;;                (and (= (trace-value original in1) (trace-value refinement in1))
;;                     (= (trace-value original in2) (trace-value refinement in3))
;;                     (= (trace-value original in3) (trace-value refinement in2)))
;;                (and (= (trace-value original in1) (trace-value refinement in2))
;;                     (= (trace-value original in2) (trace-value refinement in1))
;;                     (= (trace-value original in3) (trace-value refinement in3)))
;;                (and (= (trace-value original in1) (trace-value refinement in2))
;;                     (= (trace-value original in2) (trace-value refinement in3))
;;                     (= (trace-value original in3) (trace-value refinement in1)))
;;                (and (= (trace-value original in1) (trace-value refinement in3))
;;                     (= (trace-value original in2) (trace-value refinement in1))
;;                     (= (trace-value original in3) (trace-value refinement in2)))
;;                (and (= (trace-value original in1) (trace-value refinement in3))
;;                     (= (trace-value original in2) (trace-value refinement in2))
;;                     (= (trace-value original in3) (trace-value refinement in1))))
;;            (/= (trace-value original sum) (trace-value refinement sum))))))

;; (expect (outcome counterexample))
;; (print-stats)
